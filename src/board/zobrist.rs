use crate::types::{Color, Piece, Square};

/// Set of random numbers used to generate zobrist hash keys.
/// Look up zobrist hashing on wikipedia or chess programming wiki for more info.
pub struct Zobrist {
    /// random numbers for each color-piece-square
    pub pieces: [[[u64; Square::NUM]; Piece::NUM]; Color::NUM],
    pub en_passant: [u64; Square::NUM],
    /// There are 16 different possible castling rights combinations
    pub castling: [u64; 16],
    /// probably include if black and not if white?
    pub side_to_move: u64,
}

// init the zobrist numbers here
pub const ZOBRIST: Zobrist = {
    let mut zobrist = [0; 849];
    let len = zobrist.len();
    let mut i = 0;
    // This initial number was randomly generated by the rand package
    let mut seed: u64 = 11709525906439064677;
    while i < len {
        // TODO: set zobrist[i] to be a random u64
        // prng: xor shift 64 from [wikipedia](https://en.wikipedia.org/wiki/Xorshift)
        seed ^= seed << 13;
        seed ^= seed >> 7;
        seed ^= seed << 17;
        zobrist[i] = seed;

        i += 1;
    }
    unsafe { std::mem::transmute(zobrist) }
};
